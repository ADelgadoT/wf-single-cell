//
// Notes to End Users.
//
// The workflow should run without editing this configuration file,
// however there may be instances in which you wish to edit this
// file for compute performance or other reasons. Please see:
//
//   https://nextflow.io/docs/latest/config.html#configuration
//
// for further help editing this file.


params {
    help = false
    out_dir = "output"
    sample_sheet = null
    sample = null
    single_cell_sample_sheet = null
    sanitize_fastq = false
    wfversion = "v0.1.0"
    aws_image_prefix = null
    aws_queue = null
    report_name = "report"
    disable_ping = false

    REF_GENOME_DIR = null
    MAX_THREADS = 2
    READ_STRUCTURE_BATCH_SIZE = 40000
    READ_STRUCTURE_FLAGS = null
    BARCODE_ADAPTER1_SUFF_LENGTH = 10
    BARCODE_KNEEPLOT_FLAGS = null
    BARCODE_MAX_ED = 2
    BARCODE_MIN_ED_DIFF = 2
    GENE_ASSIGNS_MINQV = 60
    UMI_GENOMIC_INTERVAL = 1000
    UMI_CELL_GENE_MAX_READS = 20000
    UMI_CLUSTER_MAX_THREADS = 4
    MATRIX_MIN_GENES = 25
    MATRIX_MIN_CELLS = 3
    MATRIX_MAX_MITO = 20
    MATRIX_NORM_COUNT = 10000
    UMAP_PLOT_GENES = [ 
        "CD19",
        "CD24",
        "CD27",
        "CD38",
         "CD79A",
        "CD79B",
        "PAX5",
         "XBP1"
    ]
    RESOURCES_MM2_MEM_GB = 50
    RESOURCES_MM2_MAX_THREADS = 4


    process_label = "sockeye"
    monochrome_logs = false
    validate_params = true
    show_hidden_params = false
    schema_ignore_params = 'show_hidden_params,validate_params,monochrome_logs,aws_queue,aws_image_prefix,wfversion,wf'



    wf {
        example_cmd = [
            "--fastq test_data/reads.fastq.gz"
        ]
    }
}

manifest {
    name            = 'epi2me-labs/wf-sockeye'
    author          = 'Oxford Nanopore Technologies'
    homePage        = 'https://github.com/epi2me-labs/wf-sockeye'
    description     = 'Template workflow'
    mainScript      = 'main.nf'
    nextflowVersion = '>=20.10.0'
    //version       = 'v0.0.7'  // TODO: do switch to this?
}

executor {
    $local {
        cpus = 4
        memory = "8 GB"
    }
}


// used by default for "standard" (docker) and singularity profiles,
// other profiles may override.
process {
    withLabel:sockeye {
        container = "ontresearch/wf-sockeye:${params.wfversion}"
    }
    shell = ['/bin/bash', '-euo', 'pipefail']
}


profiles {
    // the "standard" profile is used implicitely by nextflow
    // if no other profile is given on the CLI
    standard {
        docker {
            enabled = true
            // this ensures container is run as host user and group, but
            //    also adds host user to the within-container group
            runOptions = "--user \$(id -u):\$(id -g) --group-add 100"
        }
    }

    // using singularity instead of docker
    singularity {
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    
    // profile using conda environments
    conda {
        docker.enabled = false
        process {
            withLabel:wftemplate {
                conda = "${projectDir}/environment.yaml"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
        conda {
             cacheDir = ""
             useMamba = true
        }
    }

    // Using AWS batch.
    // May need to set aws.region and aws.batch.cliPath
    awsbatch {
        process {
            executor = 'awsbatch'
            queue = "${params.aws_queue}"
            memory = '8G'
            withLabel:wftemplate {
                container = "${params.aws_image_prefix}-wf-sockeye:${params.wfversion}"
            }
            shell = ['/bin/bash', '-euo', 'pipefail']
        }
    }

    // local profile for simplified development testing
    local {
        process.executor = 'local'
    }
}


timeline {
  enabled = true
  file = "${params.out_dir}/execution/timeline.html"
}
report {
  enabled = true
  file = "${params.out_dir}/execution/report.html"
}
trace {
  enabled = true
  file = "${params.out_dir}/execution/trace.txt"
}
dag {
  enabled = true
  file = "${params.out_dir}/execution/pipeline.svg"
}
